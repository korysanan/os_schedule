#quantun이 3이상일때 정상적으로 실행됨
def RR(n, processes, quantum):
    remaining_burst_time = [p[2] for p in processes]
    completion_time = [0]*n
    waiting_time = [0]*n
    turnaround_time = [0]*n
    current_time = 0

    while True:
        done = True
        for i in range(n):
            if remaining_burst_time[i] > 0:
                done = False

                if remaining_burst_time[i] > quantum:
                    current_time += quantum
                    remaining_burst_time[i] -= quantum
                else:
                    current_time += remaining_burst_time[i]
                    completion_time[i] = current_time
                    waiting_time[i] = completion_time[i] - processes[i][1] - processes[i][2]
                    turnaround_time[i] = completion_time[i] - processes[i][1]
                    remaining_burst_time[i] = 0
                    processes[i] = processes[i] + [waiting_time[i], turnaround_time[i]]
        
        if done == True:
            break

    return processes

# p1 제외 quantum = 2일 때 정상 작동
def RR(n, processes, quantum):
    remaining_burst_time = [p[2] for p in processes]
    completion_time = [0]*n
    waiting_time = [0]*n
    turnaround_time = [0]*n
    current_time = 0
    queue = [] # 큐 생성

    while True:
        done = True
        # 큐에 프로세스가 없으면서 아직 실행하지 않은 프로세스를 큐에 추가
        for i in range(n):
            if remaining_burst_time[i] > 0 and processes[i] not in queue:
                if current_time >= processes[i][1]:
                    queue.append(processes[i])
        # 큐에 있는 프로세스 실행
        if queue:
            process = queue.pop(0)
            i = processes.index(process)
            if remaining_burst_time[i] > 0:
                done = False
                if remaining_burst_time[i] > quantum:
                    current_time += quantum
                    remaining_burst_time[i] -= quantum
                    queue.append(process) # quantum 이후에도 실행이 안끝난 프로세스는 다시 큐에 추가
                else:
                    current_time += remaining_burst_time[i]
                    completion_time[i] = current_time
                    waiting_time[i] = completion_time[i] - processes[i][1] - processes[i][2]
                    turnaround_time[i] = completion_time[i] - processes[i][1]
                    remaining_burst_time[i] = 0
                    processes[i] = processes[i] + [waiting_time[i], turnaround_time[i]]
        # 큐가 비어있으면 시간을 1 증가시킴
        else:
            current_time += 1

        if done == True:
            break

    return processes
